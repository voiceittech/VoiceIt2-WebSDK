/*!
 * Programatically add the following
 */

/*!
 * videojs-record
 * @version 4.5.0
 * @see https://github.com/collab-project/videojs-record
 * @copyright 2014-2021 Collab
 * @license MIT
 */

/*!
 * videojs-wavesurfer
 * @version 3.8.0
 * @see https://github.com/collab-project/videojs-wavesurfer
 * @copyright 2014-2021 Collab
 * @license MIT
 */

/*!
 * wavesurfer.js 4.6.0 (2021-03-05)
 * https://wavesurfer-js.org
 * @license BSD-3-Clause
 */

/*!
 * wavesurfer.js 5.1.0 (2021-06-20)
 * https://wavesurfer-js.org
 * @license BSD-3-Clause
 */

/*!
 * wavesurfer.js microphone plugin 4.6.0 (2021-03-05)
 * https://wavesurfer-js.org
 * @license BSD-3-Clause
 */

/*! ../event */

/*! ../helpers/typeof */

/*! ../utils/detect-browser */

/*! ../utils/file-util */

/*! ./absMax */

/*! ./assertThisInitialized */

/*! ./clamp */

/*! ./controls/animation-display */

/*! ./controls/camera-button */

/*! ./controls/device-button */

/*! ./controls/picture-in-picture-toggle */

/*! ./controls/record-canvas */

/*! ./controls/record-indicator */

/*! ./controls/record-toggle */

/*! ./convert-engine */

/*! ./defaults */

/*! ./drawer */

/*! ./drawer.canvasentry */

/*! ./drawer.multicanvas */

/*! ./engine/engine-loader */

/*! ./engine/record-mode */

/*! ./event */

/*! ./fetch */

/*! ./frame */

/*! ./get-id */

/*! ./getPrototypeOf */

/*! ./hot-keys */

/*! ./max */

/*! ./mediaelement */

/*! ./mediaelement-webaudio */

/*! ./middleware */

/*! ./mime */

/*! ./min */

/*! ./observer */

/*! ./orientation */

/*! ./peakcache */

/*! ./prevent-click */

/*! ./record-engine */

/*! ./record-mode */

/*! ./record-rtc */

/*! ./request-animation-frame */

/*! ./setPrototypeOf */

/*! ./style */

/*! ./superPropBase */

/*! ./util */

/*! ./util/get-id */

/*! ./util/style */

/*! ./utils/browser-shim */

/*! ./utils/compare-version */

/*! ./utils/detect-browser */

/*! ./utils/format-time */

/*! ./utils/log */

/*! ./webaudio */

/*! @babel/runtime/helpers/assertThisInitialized */

/*! @babel/runtime/helpers/asyncToGenerator */

/*! @babel/runtime/helpers/classCallCheck */

/*! @babel/runtime/helpers/createClass */

/*! @babel/runtime/helpers/get */

/*! @babel/runtime/helpers/getPrototypeOf */

/*! @babel/runtime/helpers/inherits */

/*! @babel/runtime/helpers/interopRequireDefault */

/*! @babel/runtime/helpers/possibleConstructorReturn */

/*! @babel/runtime/helpers/typeof */

/*! @babel/runtime/regenerator */

/*! @name @videojs/http-streaming @version 2.9.1 @license Apache-2.0 */

/*! @name aes-decrypter @version 3.1.2 @license Apache-2.0 */

/*! @name m3u8-parser @version 4.7.0 @license Apache-2.0 */

/*! @name pkcs7 @version 1.0.4 @license Apache-2.0 */

/*! For license information please see shifty.js.LICENSE.txt */

/*! add-zero */

/*! debounce */

/*! global/window */

/*! parse-ms */

/*! recordrtc */

/*! regenerator-runtime */

/*! video.js */

/*! wavesurfer.js */

/*!***********************!*\
  !*** ./src/drawer.js ***!
  \***********************/

/*!*************************!*\
  !*** ./src/js/event.js ***!
  \*************************/

/*!*************************!*\
  !*** ./src/util/max.js ***!
  \*************************/

/*!*************************!*\
  !*** ./src/util/min.js ***!
  \*************************/

/*!*************************!*\
  !*** ./src/webaudio.js ***!
  \*************************/

/*!**************************!*\
  !*** ./src/peakcache.js ***!
  \**************************/

/*!***************************!*\
  !*** ./src/util/clamp.js ***!
  \***************************/

/*!***************************!*\
  !*** ./src/util/fetch.js ***!
  \***************************/

/*!***************************!*\
  !*** ./src/util/frame.js ***!
  \***************************/

/*!***************************!*\
  !*** ./src/util/index.js ***!
  \***************************/

/*!***************************!*\
  !*** ./src/util/style.js ***!
  \***************************/

/*!***************************!*\
  !*** ./src/wavesurfer.js ***!
  \***************************/

/*!****************************!*\
  !*** ./src/js/defaults.js ***!
  \****************************/

/*!****************************!*\
  !*** ./src/js/hot-keys.js ***!
  \****************************/

/*!****************************!*\
  !*** ./src/util/absMax.js ***!
  \****************************/

/*!****************************!*\
  !*** ./src/util/get-id.js ***!
  \****************************/

/*!*****************************!*\
  !*** ./src/js/utils/log.js ***!
  \*****************************/

/*!*****************************!*\
  !*** ./src/mediaelement.js ***!
  \*****************************/

/*!******************************!*\
  !*** ./src/js/middleware.js ***!
  \******************************/

/*!******************************!*\
  !*** ./src/js/utils/mime.js ***!
  \******************************/

/*!******************************!*\
  !*** ./src/util/observer.js ***!
  \******************************/

/*!*********************************!*\
  !*** ./src/util/orientation.js ***!
  \*********************************/

/*!**********************************!*\
  !*** ./src/js/videojs.record.js ***!
  \**********************************/

/*!***********************************!*\
  !*** ./src/drawer.canvasentry.js ***!
  \***********************************/

/*!***********************************!*\
  !*** ./src/drawer.multicanvas.js ***!
  \***********************************/

/*!***********************************!*\
  !*** ./src/js/utils/file-util.js ***!
  \***********************************/

/*!***********************************!*\
  !*** ./src/util/prevent-click.js ***!
  \***********************************/

/*!*************************************!*\
  !*** ./src/js/engine/record-rtc.js ***!
  \*************************************/

/*!*************************************!*\
  !*** ./src/js/utils/format-time.js ***!
  \*************************************/

/*!**************************************!*\
  !*** ./src/js/engine/record-mode.js ***!
  \**************************************/

/*!**************************************!*\
  !*** ./src/js/utils/browser-shim.js ***!
  \**************************************/

/*!**************************************!*\
  !*** ./src/js/videojs.wavesurfer.js ***!
  \**************************************/

/*!**************************************!*\
  !*** ./src/mediaelement-webaudio.js ***!
  \**************************************/

/*!***************************************!*\
  !*** ./node_modules/global/window.js ***!
  \***************************************/

/*!****************************************!*\
  !*** ./node_modules/add-zero/index.js ***!
  \****************************************/

/*!****************************************!*\
  !*** ./node_modules/debounce/index.js ***!
  \****************************************/

/*!****************************************!*\
  !*** ./node_modules/parse-ms/index.js ***!
  \****************************************/

/*!****************************************!*\
  !*** ./src/js/engine/engine-loader.js ***!
  \****************************************/

/*!****************************************!*\
  !*** ./src/js/engine/record-engine.js ***!
  \****************************************/

/*!****************************************!*\
  !*** ./src/js/utils/detect-browser.js ***!
  \****************************************/

/*!****************************************!*\
  !*** ./src/plugin/microphone/index.js ***!
  \****************************************/

/*!*****************************************!*\
  !*** ./src/js/engine/convert-engine.js ***!
  \*****************************************/

/*!*****************************************!*\
  !*** ./src/js/utils/compare-version.js ***!
  \*****************************************/

/*!******************************************!*\
  !*** ./src/js/controls/camera-button.js ***!
  \******************************************/

/*!******************************************!*\
  !*** ./src/js/controls/device-button.js ***!
  \******************************************/

/*!******************************************!*\
  !*** ./src/js/controls/record-canvas.js ***!
  \******************************************/

/*!******************************************!*\
  !*** ./src/js/controls/record-toggle.js ***!
  \******************************************/

/*!*********************************************!*\
  !*** ./src/js/controls/record-indicator.js ***!
  \*********************************************/

/*!*********************************************!*\
  !*** ./src/util/request-animation-frame.js ***!
  \*********************************************/

/*!**********************************************!*\
  !*** ./src/js/controls/animation-display.js ***!
  \**********************************************/

/*!****************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/get.js ***!
  \****************************************************/

/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/

/*!******************************************************!*\
  !*** ./src/js/controls/picture-in-picture-toggle.js ***!
  \******************************************************/

/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/

/*!*********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/inherits.js ***!
  \*********************************************************/

/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/

/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/

/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/superPropBase.js ***!
  \**************************************************************/

/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/getPrototypeOf.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/setPrototypeOf.js ***!
  \***************************************************************/

/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \*****************************************************************/

/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/assertThisInitialized.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \**********************************************************************/

/*!**************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js ***!
  \**************************************************************************/

/*!*************************************************************************************************!*\
  !*** external {"commonjs":"video.js","commonjs2":"video.js","amd":"video.js","root":"videojs"} ***!
  \*************************************************************************************************/

/*!******************************************************************************************************!*\
  !*** external {"commonjs":"recordrtc","commonjs2":"recordrtc","amd":"recordrtc","root":"RecordRTC"} ***!
  \******************************************************************************************************/

/*!*******************************************************************************************************************!*\
  !*** external {"commonjs":"wavesurfer.js","commonjs2":"wavesurfer.js","amd":"wavesurfer.js","root":"WaveSurfer"} ***!
  \*******************************************************************************************************************/

/**
 * CanvasRecorder is a standalone class used by {@link RecordRTC} to bring HTML5-Canvas recording into video WebM. It uses HTML2Canvas library and runs top over {@link Whammy}.
 * @summary HTML2Canvas recording into video WebM.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef CanvasRecorder
 * @class
 * @example
 * var recorder = new CanvasRecorder(htmlElement, { disableLogs: true, useWhammyRecorder: true });
 * recorder.record();
 * recorder.stop(function(blob) {
 *     video.src = URL.createObjectURL(blob);
 * });
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {HTMLElement} htmlElement - querySelector/getElementById/getElementsByTagName[0]/etc.
 * @param {object} config - {disableLogs:true, initCallback: function}
 */

/**
 * DiskStorage is a standalone object used by {@link RecordRTC} to store recorded blobs in IndexedDB storage.
 * @summary Writing blobs into IndexedDB.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @example
 * DiskStorage.Store({
 *     audioBlob: yourAudioBlob,
 *     videoBlob: yourVideoBlob,
 *     gifBlob  : yourGifBlob
 * });
 * DiskStorage.Fetch(function(dataURL, type) {
 *     if(type === 'audioBlob') { }
 *     if(type === 'videoBlob') { }
 *     if(type === 'gifBlob')   { }
 * });
 * // DiskStorage.dataStoreName = 'recordRTC';
 * // DiskStorage.onError = function(error) { };
 * @property {function} init - This method must be called once to initialize IndexedDB ObjectStore. Though, it is auto-used internally.
 * @property {function} Fetch - This method fetches stored blobs from IndexedDB.
 * @property {function} Store - This method stores blobs in IndexedDB.
 * @property {function} onError - This function is invoked for any known/unknown error.
 * @property {string} dataStoreName - Name of the ObjectStore created in IndexedDB storage.
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 */

/**
 * GifRecorder is standalone calss used by {@link RecordRTC} to record video or canvas into animated gif.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef GifRecorder
 * @class
 * @example
 * var recorder = new GifRecorder(mediaStream || canvas || context, { onGifPreview: function, onGifRecordingStarted: function, width: 1280, height: 720, frameRate: 200, quality: 10 });
 * recorder.record();
 * recorder.stop(function(blob) {
 *     img.src = URL.createObjectURL(blob);
 * });
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {MediaStream} mediaStream - MediaStream object or HTMLCanvasElement or CanvasRenderingContext2D.
 * @param {object} config - {disableLogs:true, initCallback: function, width: 320, height: 240, frameRate: 200, quality: 10}
 */

/**
 * MRecordRTC runs on top of {@link RecordRTC} to bring multiple recordings in a single place, by providing simple API.
 * @summary MRecordRTC stands for "Multiple-RecordRTC".
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef MRecordRTC
 * @class
 * @example
 * var recorder = new MRecordRTC();
 * recorder.addStream(MediaStream);
 * recorder.mediaType = {
 *     audio: true, // or StereoAudioRecorder or MediaStreamRecorder
 *     video: true, // or WhammyRecorder or MediaStreamRecorder or WebAssemblyRecorder or CanvasRecorder
 *     gif: true    // or GifRecorder
 * };
 * // mimeType is optional and should be set only in advance cases.
 * recorder.mimeType = {
 *     audio: 'audio/wav',
 *     video: 'video/webm',
 *     gif:   'image/gif'
 * };
 * recorder.startRecording();
 * @see For further information:
 * @see {@link https://github.com/muaz-khan/RecordRTC/tree/master/MRecordRTC|MRecordRTC Source Code}
 * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
 * @requires {@link RecordRTC}
 */

/**
 * MediaStreamRecorder is an abstraction layer for {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}. It is used by {@link RecordRTC} to record MediaStream(s) in both Chrome and Firefox.
 * @summary Runs top over {@link https://w3c.github.io/mediacapture-record/MediaRecorder.html|MediaRecorder API}.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://github.com/muaz-khan|Muaz Khan}
 * @typedef MediaStreamRecorder
 * @class
 * @example
 * var config = {
 *     mimeType: 'video/webm', // vp8, vp9, h264, mkv, opus/vorbis
 *     audioBitsPerSecond : 256 * 8 * 1024,
 *     videoBitsPerSecond : 256 * 8 * 1024,
 *     bitsPerSecond: 256 * 8 * 1024,  // if this is provided, skip above two
 *     checkForInactiveTracks: true,
 *     timeSlice: 1000, // concatenate intervals based blobs
 *     ondataavailable: function() {} // get intervals based blobs
 * }
 * var recorder = new MediaStreamRecorder(mediaStream, config);
 * recorder.record();
 * recorder.stop(function(blob) {
 *     video.src = URL.createObjectURL(blob);
 *
 *     // or
 *     var blob = recorder.blob;
 * });
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
 * @param {object} config - {disableLogs:true, initCallback: function, mimeType: "video/webm", timeSlice: 1000}
 * @throws Will throw an error if first argument "MediaStream" is missing. Also throws error if "MediaRecorder API" are not supported by the browser.
 */

/**
 * MultiStreamRecorder can record multiple videos in single container.
 * @summary Multi-videos recorder.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef MultiStreamRecorder
 * @class
 * @example
 * var options = {
 *     mimeType: 'video/webm'
 * }
 * var recorder = new MultiStreamRecorder(ArrayOfMediaStreams, options);
 * recorder.record();
 * recorder.stop(function(blob) {
 *     video.src = URL.createObjectURL(blob);
 *
 *     // or
 *     var blob = recorder.blob;
 * });
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {MediaStreams} mediaStreams - Array of MediaStreams.
 * @param {object} config - {disableLogs:true, frameInterval: 1, mimeType: "video/webm"}
 */

/**
 * RecordRTCPromisesHandler adds promises support in {@link RecordRTC}. Try a {@link https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/RecordRTCPromisesHandler.html|demo here}
 * @summary Promises for {@link RecordRTC}
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef RecordRTCPromisesHandler
 * @class
 * @example
 * var recorder = new RecordRTCPromisesHandler(mediaStream, options);
 * recorder.startRecording()
 *         .then(successCB)
 *         .catch(errorCB);
 * // Note: You can access all RecordRTC API using "recorder.recordRTC" e.g. 
 * recorder.recordRTC.onStateChanged = function(state) {};
 * recorder.recordRTC.setRecordingDuration(5000);
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.
 * @param {object} config - {type:"video", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}
 * @throws Will throw an error if "new" keyword is not used to initiate "RecordRTCPromisesHandler". Also throws error if first argument "MediaStream" is missing.
 * @requires {@link RecordRTC}
 */

/**
 * StereoAudioRecorder is a standalone class used by {@link RecordRTC} to bring "stereo" audio-recording in chrome.
 * @summary JavaScript standalone object for stereo audio recording.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef StereoAudioRecorder
 * @class
 * @example
 * var recorder = new StereoAudioRecorder(MediaStream, {
 *     sampleRate: 44100,
 *     bufferSize: 4096
 * });
 * recorder.record();
 * recorder.stop(function(blob) {
 *     video.src = URL.createObjectURL(blob);
 * });
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
 * @param {object} config - {sampleRate: 44100, bufferSize: 4096, numberOfAudioChannels: 1, etc.}
 */

/**
 * Storage is a standalone object used by {@link RecordRTC} to store reusable objects e.g. "new AudioContext".
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @example
 * Storage.AudioContext === webkitAudioContext
 * @property {webkitAudioContext} AudioContext - Keeps a reference to AudioContext object.
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 */

/**
 * WebAssemblyRecorder lets you create webm videos in JavaScript via WebAssembly. The library consumes raw RGBA32 buffers (4 bytes per pixel) and turns them into a webm video with the given framerate and quality. This makes it compatible out-of-the-box with ImageData from a CANVAS. With realtime mode you can also use webm-wasm for streaming webm videos.
 * @summary Video recording feature in Chrome, Firefox and maybe Edge.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef WebAssemblyRecorder
 * @class
 * @example
 * var recorder = new WebAssemblyRecorder(mediaStream);
 * recorder.record();
 * recorder.stop(function(blob) {
 *     video.src = URL.createObjectURL(blob);
 * });
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
 * @param {object} config - {webAssemblyPath:'webm-wasm.wasm',workerPath: 'webm-worker.js', frameRate: 30, width: 1920, height: 1080, bitrate: 1024, realtime: true}
 */

/**
 * Whammy is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It is written by {@link https://github.com/antimatter15|antimatter15}
 * @summary A real time javascript webm encoder based on a canvas hack.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef Whammy
 * @class
 * @example
 * var recorder = new Whammy().Video(15);
 * recorder.add(context || canvas || dataURL);
 * var output = recorder.compile();
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 */

/**
 * WhammyRecorder is a standalone class used by {@link RecordRTC} to bring video recording in Chrome. It runs top over {@link Whammy}.
 * @summary Video recording feature in Chrome.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef WhammyRecorder
 * @class
 * @example
 * var recorder = new WhammyRecorder(mediaStream);
 * recorder.record();
 * recorder.stop(function(blob) {
 *     video.src = URL.createObjectURL(blob);
 * });
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
 * @param {object} config - {disableLogs: true, initCallback: function, video: HTMLVideoElement, etc.}
 */

/**
 * {@link GetRecorderType} is an inner/private helper for {@link RecordRTC}.
 * @summary It returns best recorder-type available for your browser.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef GetRecorderType
 * @class
 * @example
 * var RecorderType = GetRecorderType(options);
 * var recorder = new RecorderType(options);
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
 * @param {object} config - {type:"video", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}
 */

/**
 * {@link RecordRTCConfiguration} is an inner/private helper for {@link RecordRTC}.
 * @summary It configures the 2nd parameter passed over {@link RecordRTC} and returns a valid "config" object.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef RecordRTCConfiguration
 * @class
 * @example
 * var options = RecordRTCConfiguration(mediaStream, options);
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.
 * @param {object} config - {type:"video", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, getNativeBlob:true, etc.}
 */

/**
 * {@link https://github.com/muaz-khan/RecordRTC|RecordRTC} is a WebRTC JavaScript library for audio/video as well as screen activity recording. It supports Chrome, Firefox, Opera, Android, and Microsoft Edge. Platforms: Linux, Mac and Windows. 
 * @summary Record audio, video or screen inside the browser.
 * @license {@link https://github.com/muaz-khan/RecordRTC/blob/master/LICENSE|MIT}
 * @author {@link https://MuazKhan.com|Muaz Khan}
 * @typedef RecordRTC
 * @class
 * @example
 * var recorder = RecordRTC(mediaStream or [arrayOfMediaStream], {
 *     type: 'video', // audio or video or gif or canvas
 *     recorderType: MediaStreamRecorder || CanvasRecorder || StereoAudioRecorder || Etc
 * });
 * recorder.startRecording();
 * @see For further information:
 * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}
 * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.
 * @param {object} config - {type:"video", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, desiredSampRate: 16000, video: HTMLVideoElement, etc.}
 */
